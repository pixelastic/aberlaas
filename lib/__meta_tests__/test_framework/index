#!/usr/bin/env bash
# This is a very simple test framework, to test at the CLI level that our "yarn
# test" command actually work as expected
#
# A typical test file should look like:
#
# test "name of the test"
# actual() {
#   # Code of the method to run
# }
#
# Add any expectation
# expect_to_fail
# expect_to_succeed

# shellcheck disable=SC1091
ROOT="$(readlink -f "$(dirname "${BASH_SOURCE[0]}")/../../../")"
HERE="$(readlink -f "$(dirname "$0")")"
export HERE

source "${ROOT}/lib/__meta_tests__/test_framework/catch"

# Global vars used by the framework
EXPECT_NAME=""
IS_VERBOSE=0
ACTUAL_IS_RUN=0
ACTUAL_STDOUT=""
ACTUAL_STDERR=""
ACTUAL_EXITCODE=-1

# Default testName is empty, but define it with test
test() {
	echo "Test: $1"
}

# Enable verbose mode
verbose() {
	IS_VERBOSE=1
}

# End the test as a success
success() {
	echo "✔ $EXPECT_NAME"
	return 0
}

# End the test as a failure
failure() {
	echo "✗ $EXPECT_NAME"
	return 1
}

# Run the "actual" function, and set ACTUAL_* vars
getResult() {
	# Only run it once
	[[ $ACTUAL_IS_RUN == 1 ]] && return

	# Split stdout, stderr and exit code into their own variables
	FORCE_COLOR=1 catch ACTUAL_STDOUT ACTUAL_STDERR actual
	ACTUAL_EXITCODE=$?

	# Display output if verbose is enabled
	if [[ $IS_VERBOSE == 1 ]]; then
		if [[ $ACTUAL_STDOUT != "" ]]; then
			echo "$ACTUAL_STDOUT"
		fi
		if [[ $ACTUAL_STDERR != "" ]]; then
			echo "$ACTUAL_STDERR"
		fi
	fi

	# Mark as run
	ACTUAL_IS_RUN=1
}

# Check the exitCode, and expect it to succeed
expect_to_succeed() {
	getResult

	EXPECT_NAME="Tests are passing"
	if [[ "$ACTUAL_EXITCODE" == 0 ]]; then success; else failure; fi
}

# Check the exitCode, and expect it to fail
expect_to_fail() {
	getResult

	EXPECT_NAME="Tests are failing"
	if [[ "$ACTUAL_EXITCODE" == 0 ]]; then failure; else success; fi
}

expect_to_contain() {
	getResult
	input=$1

	EXPECT_NAME="Output contains the string \"$input\""
	if [[ "$ACTUAL_STDOUT" == *$input* ]]; then success; else failure; fi
}

expect_not_to_contain() {
	getResult
	input=$1

	EXPECT_NAME="Output does not contains the string \"$input\""
	if [[ "$ACTUAL_STDOUT" == *$input* ]]; then failure; else success; fi
}
